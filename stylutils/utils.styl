use('helpers.js')

@require 'mediaqueries'
@require 'media'
@require 'icons'
@require 'propmagic'
@require 'quotes'
@require 'triangles'
@require 'a11y'

@require 'cols'
@require 'between'
@require 'csscalc'
@require 'buttonreset'
@require 'hidetext'
@require 'extendsides'
@require 'fade'
@require 'percent'
@require 'isvertical'
@require 'one'









// ===============================================================================
// Misc




_afterClear() {
    &::after {
        content: ' '
        clear: both
        display: block
        height: 0
    }
}








// Helper to implement fluid/scalable font-size assignments.
// Especially useful for setting REM base for the html element.
// `step` can be either a fixed increment or a unitless scaling factor.
// Usage:
//      html {
//          scale-fontsize(
//              basefs,    // Starting font-size (any unit)
//              width,     // Starting (minimum) window width
//              max,       // Maximum window width limit (stopper)
//              step,      // font-size increment value. (Either a fixed
//                         // increment or a unitless scaling factor.)
//              track,     // Unitless scaling factor (0...1) to describe
//                         // how perfectly font-size should track window width
//              )
//      }
// Example:
//      scale-fontsize( 14px, 1000px, max:3000px, step:1.2, track:.5 )
// means:
//   * start with 14px font at 1000px width
//   * increase the font-size by 20% for each step
//   * up to a width of 3000px
//   * where each font-size step increases the width by 40%
//   * (i.e. where font-size increases at .5 the rate of the width)
//
scale-fontsize( basefs, width=320px, max=1600px, step=0.5px, track=.133, first=true ) {
    if ( unit(track) || track > 1 || track <= 0 ) {
        error("scale-fontsize()'s `track` parameter must be a unitless number between 0 and 1")
    }
    if ( !unit(step) && step <= 1 ) {
        error("scale-fontsize()'s `step` scaling factor must have a unit, or be larger than 1")
    }
    if ( width <= max ) {
        $mq = first ? 'screen' : 'screen and (min-width: '+width+')'
        @media $mq {
            font-size: basefs
        }
        $nextfs = unit(step) ? basefs + step : basefs * step
        $nextwidth = round( (1 + (($nextfs / basefs - 1) / track)) * width )
        scale-fontsize($nextfs, $nextwidth, max, step, track, false)
    }
}


// Deprecated:
// -------------------------------------------------
$quote_upper6 = $quotes.upper6
$quote_upper9 = $quotes.upper9
$quote_lower9 = $quotes.lower9
$quote_upper66 = $quotes.upper66
$quote_upper99 = $quotes.upper99
$quote_lower99 = $quotes.lower99
// icelandic
$quote_open_is = $quotes.IS.open
$quote_close_is = $quotes.IS.close
$quote_openSingle_is = $quotes.IS.openSingle
$quote_closeSingle_is = $quotes.IS.closeSingle
// english
$quote_open_en = $quotes.EN.open
$quote_close_en = $quotes.EN.close
$quote_openSingle_en = $quotes.EN.openSingle
$quote_closeSingle_en = $quotes.EN.closeSingle

// screen-reader friendly off-screen hiding
_tuck() {
    position: absolute
    right: 9999px
    left: auto
}

$pxem-base ?= 12
pxem($px, $fs=$pxem-base) {
    return ($px/$fs)em
}
cssadd() {
    return csscalc(arguments)
}
